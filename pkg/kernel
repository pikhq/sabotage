[deps]
kernel-tarball
kernel-patches

[vars]
LINUX_VER=$(cat "$K"/kernel.version)
tarball=linux-"$LINUX_VER".tar.xz
pkgver=45
no_unlink=1

[build]
# get into menuconfig using
# make HOSTCFLAGS="-D_GNU_SOURCE" HOSTLDFLAGS=-lncurses menuconfig

# install regulatory domain database into kernel tree
# we build it fixed into the kernel so we don't need the bloated "crda" tool
# to change regulatory domains with iw set reg.
cp -f "$K"/linux-regdb.txt net/wireless/db.txt

dopatch() {
	echo "applying patch $1"
	if ! patch -p1 < "$K"/"$1" ; then
		echo "patch failed!"
		exit 1
	fi
}

for p in $(cat "$K"/kernel.patches) ; do
	kpatch="$C"/kernel-patch-"$p".xz
	[ -e "$kpatch" ] || {
		echo "error: kernel patch $kpatch not found"
		exit 1
	}
	xzcat "$C"/kernel-patch-"$p".xz | patch -p 1
done

dopatch linux-timeconst-nobc.patch

# force reproducible build
sed -i Makefile -e 's/--build-id/--build-id=none/g'
sed -i usr/gen_init_cpio.c -e 's/time(NULL)/0/' \
    -e 's,default_mtime = strtol,break;//,'

gzip_timestamp=$(echo test | gzip -c | dd bs=1 count=4 skip=4 2>/dev/null | od -t x4 | head -n1 | cut -d " " -f 2)
test "$gzip_timestamp" = 00000000 || cat << EOF
WARNING: your build will be non-reproducible, because your gzip doesn't default
to creating zero timestamps. there are numerous places where the kernel embeds
gzipped files (for example the future /proc/config.gz). it would need some eff-
ort to patch all gzip callsites to use gzip -n. sabotage's busybox is patched
to do the right thing, and upstream busybox does the same. in case you can't
easily use busybox' gzip command, you could install pikhq's mini gzip
https://github.com/pikhq/gzip somewhere into your PATH so it's picked up first.
EOF

export ARCH=$A
linux_config="$K"/linux.config

if [ -z "$HOSTCC" ] ; then
	HOSTCC="$CC"
fi

if [ "$A" = arm ] ; then
	[ -z "$ARM_ARCH" ] && (echo "error: need to set ARM_ARCH to 4-7" ; exit 1)
	linux_config="$linux_config $K/linux.config.armv${ARM_ARCH}l"
fi

cat "$linux_config" > my.config

make V=1 ARCH=$A allnoconfig HOSTCFLAGS="-D_GNU_SOURCE" \
  KCONFIG_ALLCONFIG=my.config DISABLE_PAX_PLUGINS=y

make V=1 -j$MAKE_THREADS CC="$CC" ARCH=$A HOSTCC="$HOSTCC" \
  HOSTCFLAGS=-D_GNU_SOURCE DISABLE_PAX_PLUGINS=y \
  KBUILD_BUILD_USER=user \
  KBUILD_BUILD_HOST=sabotage \
  KBUILD_BUILD_TIMESTAMP="2017-00-00" \
  KBUILD_BUILD_VERSION=0


mkdir -p $butch_install_dir/boot $butch_install_dir/lib/modules/$LINUX_VER \
         $butch_install_dir/lib/firmware

egrep -q '\=m$' my.config && got_modules=true || got_modules=false

$got_modules && \
make INSTALL_MOD_PATH=$butch_install_dir DISABLE_PAX_PLUGINS=y modules_install

cp -f System.map $butch_install_dir/boot/

if [ "$A" = arm ] ; then
	kpath="arch/arm/boot/zImage"
else
	kpath="arch/x86/boot/bzImage"
fi
cp -f $kpath $butch_install_dir/boot/vmlinuz

# "build" headers into dest/
# we need to build them after the kernel because grsec assumes this order
# otherwise some generated headers won't be found
make V=1 ARCH=$A HOSTCFLAGS=-D_GNU_SOURCE INSTALL_HDR_PATH=dest \
  DISABLE_PAX_PLUGINS=y headers_install

# remove junk from kernel headers
find dest/include \( -name .install -o -name ..install.cmd \) -delete

$got_modules && depmod -b $butch_install_dir "$LINUX_VER"

