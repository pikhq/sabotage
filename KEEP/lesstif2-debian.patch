build fix due to missing <Xm/Xm.h>.
--- lesstif2-0.94.4.orig/include/Motif-2.1/Xm/XmStrDefs.h
+++ lesstif2-0.94.4/include/Motif-2.1/Xm/XmStrDefs.h
@@ -28,6 +28,8 @@
 
 #include <X11/StringDefs.h>
 
+#include <Xm/Xm.h>
+
 #ifdef __cplusplus
 extern "C" {
 #endif
Description: Fix for a crash in _XmRenderTableFinaliseTag affecting
 many Vibrant-based applications. Closes debian bug #439186.
Forwarded: yes
--- lesstif2-0.95.0.orig/lib/Xm-2.1/RenderTable.c
+++ lesstif2-0.95.0/lib/Xm-2.1/RenderTable.c
@@ -465,7 +465,7 @@
 	DEBUGOUT(_LtDebug(__FILE__, w, "_XmRenderTableFinaliseTag(%s)\n", tag));
 #if 1
 	/* Experimental start */
-	if (r->dpy == 0)
+	if (r->dpy == 0  &&  w)
 		r->dpy = XtDisplay(w);
 	/* Experimental end */
 #endif
backport fixes from X11R6.8.2 (CAN-2004-0914)
Index: lesstif2-0.95.0/lib/Xm-2.1/XpmRdFToI.c
===================================================================
--- lesstif2-0.95.0.orig/lib/Xm-2.1/XpmRdFToI.c	2004-11-18 22:00:58.000000000 +0100
+++ lesstif2-0.95.0/lib/Xm-2.1/XpmRdFToI.c	2006-07-11 11:13:29.000000000 +0200
@@ -44,11 +44,15 @@
    DebugUtil.h! */
 #include <stdio.h>
 #include <string.h>
+#include <errno.h>
 
 #include <ctype.h>
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
+#ifdef HAVE_SYS_WAIT_H
+#include <sys/wait.h>
+#endif
 #ifdef HAVE_SYS_STAT_H
 #include <sys/stat.h>
 #endif
@@ -87,16 +91,6 @@
  	    strcpy(dst, src); \
 	else return (XpmFileInvalid); }
 #endif
-#include <sys/stat.h>
-#if !defined(NO_ZPIPE) && defined(WIN32)
-# define popen _popen
-# define pclose _pclose
-# if defined(STAT_ZFILE)
-#  include <io.h>
-#  define stat _stat
-#  define fstat _fstat
-# endif
-#endif
 
 LFUNC(OpenReadFile, int, (char *filename, xpmData *mdata));
 LFUNC(xpmDataClose, void, (xpmData *mdata));
@@ -173,90 +167,131 @@
 }
 #endif /* CXPMPROG */
 
-/*
- * open the given file to be read as an xpmData which is returned.
- */
 #ifndef NO_ZPIPE
-	FILE *s_popen(char *cmd, const char *type);
-#else
-#	define s_popen popen
+/* Do not depend on errno after read_through */
+FILE*
+xpmPipeThrough(fd, cmd, arg1, mode)
+    int fd;
+    const char* cmd;
+    const char* arg1;
+    const char* mode;
+{
+    FILE* fp;
+    int status, fds[2], in = 0, out = 1;
+    pid_t pid;
+    if ( 'w' == *mode )
+	out = 0, in = 1;
+    if ( pipe(fds) < 0 )
+	return NULL;
+    pid = fork();
+    if ( pid < 0 )
+	goto fail1;
+    if ( 0 == pid )
+    {
+	close(fds[in]);
+	if ( dup2(fds[out], out) < 0 )
+	    goto err;
+	close(fds[out]);
+	if ( dup2(fd, in) < 0 )
+	    goto err;
+	close(fd);
+	pid = fork();
+	if ( pid < 0 )
+	    goto err;
+	if ( 0 == pid )
+	{
+	    execlp(cmd, cmd, arg1, NULL);
+	    perror(cmd);
+	    goto err;
+	}
+	_exit(0);
+    err:
+	_exit(1);
+    }
+    close(fds[out]);
+    /* calling process: wait for first child */
+    while ( waitpid(pid, &status, 0) < 0 && EINTR == errno )
+	;
+    if ( WIFSIGNALED(status) ||
+	 (WIFEXITED(status) && WEXITSTATUS(status) != 0) )
+	goto fail2;
+    fp = fdopen(fds[in], mode);
+    if ( !fp )
+	goto fail2;
+    close(fd); /* still open in 2nd child */
+    return fp;
+fail1:
+    close(fds[out]);
+fail2:
+    close(fds[in]);
+    return NULL;
+}
 #endif
 
+/*
+ * open the given file to be read as an xpmData which is returned.
+ */
 static int
 OpenReadFile(filename, mdata)
     char *filename;
     xpmData *mdata;
 {
-#ifndef NO_ZPIPE
-    char buf[BUFSIZ];
-# ifdef STAT_ZFILE
-    char *compressfile;
-    struct stat status;
-# endif
-#endif
-
     if (!filename) {
 	mdata->stream.file = (stdin);
 	mdata->type = XPMFILE;
     } else {
-#ifndef NO_ZPIPE
-	size_t len = strlen(filename);
-
-	if(len == 0                        ||
-	   filename[len-1] == '/')
-		return(XpmOpenFailed);
-	if ((len > 2) && !strcmp(".Z", filename + (len - 2))) {
-	    mdata->type = XPMPIPE;
-	    snprintf(buf, sizeof(buf), "uncompress -c \"%s\"", filename);
-	    if (!(mdata->stream.file = s_popen(buf, "r")))
-		return (XpmOpenFailed);
-
-	} else if ((len > 3) && !strcmp(".gz", filename + (len - 3))) {
-	    mdata->type = XPMPIPE;
-	    snprintf(buf, sizeof(buf), "gunzip -qc \"%s\"", filename);
-	    if (!(mdata->stream.file = s_popen(buf, "r")))
-		return (XpmOpenFailed);
-
-	} else {
-# ifdef STAT_ZFILE
-	    if (!(compressfile = (char *) XpmMalloc(len + 4)))
+	int fd = open(filename, O_RDONLY);
+#if defined(NO_ZPIPE)
+	if ( fd < 0 )
+	    return XpmOpenFailed;
+#else
+	const char* ext = NULL;
+	if ( fd >= 0 )
+	    ext = strrchr(filename, '.');
+#ifdef STAT_ZFILE /* searching for z-files if the given name not found */
+	else
+	{
+	    size_t len = strlen(filename);
+	    char *compressfile = (char *) XpmMalloc(len + 4);
+	    if ( !compressfile )
 		return (XpmNoMemory);
-
-	    snprintf(compressfile, len+4, "%s.Z", filename);
-	    if (!stat(compressfile, &status)) {
-		snprintf(buf, sizeof(buf), "uncompress -c \"%s\"", compressfile);
-		if (!(mdata->stream.file = s_popen(buf, "r"))) {
+	    strcpy(compressfile, filename);
+	    strcpy(compressfile + len, ext = ".Z");
+	    fd = open(compressfile, O_RDONLY);
+	    if ( fd < 0 )
+	    {
+		strcpy(compressfile + len, ext = ".gz");
+		fd = open(compressfile, O_RDONLY);
+		if ( fd < 0 )
+		{
 		    XpmFree(compressfile);
-		    return (XpmOpenFailed);
-		}
-		mdata->type = XPMPIPE;
-	    } else {
-		snprintf(compressfile, len+4, "%s.gz", filename);
-		if (!stat(compressfile, &status)) {
-		    snprintf(buf, sizeof(buf), "gunzip -c \"%s\"", compressfile);
-		    if (!(mdata->stream.file = s_popen(buf, "r"))) {
-			XpmFree(compressfile);
-			return (XpmOpenFailed);
-		    }
-		    mdata->type = XPMPIPE;
-		} else {
-# endif
-#endif
-		    if (!(mdata->stream.file = fopen(filename, "r"))) {
-#if !defined(NO_ZPIPE) && defined(STAT_ZFILE)
-			XpmFree(compressfile);
-#endif
-			return (XpmOpenFailed);
-		    }
-		    mdata->type = XPMFILE;
-#ifndef NO_ZPIPE
-# ifdef STAT_ZFILE
+		    return XpmOpenFailed;
 		}
 	    }
 	    XpmFree(compressfile);
-# endif
 	}
 #endif
+	if ( ext && !strcmp(ext, ".Z") )
+	{
+	    mdata->type = XPMPIPE;
+	    mdata->stream.file = xpmPipeThrough(fd, "uncompress", "-c", "r");
+	}
+	else if ( ext && !strcmp(ext, ".gz") )
+	{
+	    mdata->type = XPMPIPE;
+	    mdata->stream.file = xpmPipeThrough(fd, "gunzip", "-qc", "r");
+	}
+	else
+#endif /* z-files */
+	{
+	    mdata->type = XPMFILE;
+	    mdata->stream.file = fdopen(fd, "r");
+	}
+	if (!mdata->stream.file)
+	{
+	    close(fd);
+	    return (XpmOpenFailed);
+	}
     }
     mdata->CommentLength = 0;
 #ifdef CXPMPROG
@@ -273,15 +308,6 @@
 xpmDataClose(mdata)
     xpmData *mdata;
 {
-    switch (mdata->type) {
-    case XPMFILE:
-	if (mdata->stream.file != (stdin))
-	    fclose(mdata->stream.file);
-	break;
-#ifndef NO_ZPIPE
-    case XPMPIPE:
+    if (mdata->stream.file != (stdin))
 	fclose(mdata->stream.file);
-	break;
-#endif
-    }
 }
Index: lesstif2-0.95.0/lib/Xm-2.1/XpmWrFFrI.c
===================================================================
--- lesstif2-0.95.0.orig/lib/Xm-2.1/XpmWrFFrI.c	2005-04-13 20:03:27.000000000 +0200
+++ lesstif2-0.95.0/lib/Xm-2.1/XpmWrFFrI.c	2006-07-11 11:13:29.000000000 +0200
@@ -50,11 +50,15 @@
    DebugUtil.h! */
 #include <stdio.h>
 #include <string.h>
+#include <errno.h>
 
 #include <ctype.h>
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
+#ifdef HAVE_SYS_WAIT_H
+#include <sys/wait.h>
+#endif
 #ifdef HAVE_SYS_STAT_H
 #include <sys/stat.h>
 #endif
@@ -94,11 +98,6 @@
 	else return (XpmFileInvalid); }
 #endif
 
-#if !defined(NO_ZPIPE) && defined(WIN32)
-# define popen _popen
-# define pclose _pclose
-#endif
-
 /* MS Windows define a function called WriteFile @#%#&!!! */
 LFUNC(xpmWriteFile, int, (FILE *file, XpmImage *image, char *name,
 			  XpmInfo *info));
@@ -354,58 +353,48 @@
     fprintf(file, ",\n\"XPMENDEXT\"");
 }
 
+
+#ifndef NO_ZPIPE
+FUNC(xpmPipeThrough, FILE*, (int fd,
+			     const char* cmd,
+			     const char* arg1,
+			     const char* mode));
+#endif
+
 /*
  * open the given file to be written as an xpmData which is returned
  */
-#ifndef NO_ZPIPE
-	FILE *s_popen(char *cmd, const char *type);
-#else
-#	define s_popen popen
-#endif
 static int
 OpenWriteFile(filename, mdata)
     char *filename;
     xpmData *mdata;
 {
-#ifndef NO_ZPIPE
-    char buf[BUFSIZ];
-
-#endif
-
     if (!filename) {
 	mdata->stream.file = (stdout);
 	mdata->type = XPMFILE;
     } else {
 #ifndef NO_ZPIPE
-	size_t len = strlen(filename);
-
-	if(len == 0                        ||
-	   filename[0] == '/'              ||
-	   strstr(filename, "../") != NULL ||
-	   filename[len-1] == '/')
-		return(XpmOpenFailed);
-
+	size_t len;
+#endif
+	int fd = open(filename, O_WRONLY|O_CREAT|O_TRUNC, 0644);
+	if ( fd < 0 )
+	    return(XpmOpenFailed);
+#ifndef NO_ZPIPE
+	len = strlen(filename);
 	if (len > 2 && !strcmp(".Z", filename + (len - 2))) {
-	    snprintf(buf, sizeof(buf), "compress > \"%s\"", filename);
-	    if (!(mdata->stream.file = s_popen(buf, "w")))
-		return (XpmOpenFailed);
-
+	    mdata->stream.file = xpmPipeThrough(fd, "compress", NULL, "w");
 	    mdata->type = XPMPIPE;
 	} else if (len > 3 && !strcmp(".gz", filename + (len - 3))) {
-	    snprintf(buf, sizeof(buf), "gzip -q > \"%s\"", filename);
-	    if (!(mdata->stream.file = s_popen(buf, "w")))
-		return (XpmOpenFailed);
-
+	    mdata->stream.file = xpmPipeThrough(fd, "gzip", "-q", "w");
 	    mdata->type = XPMPIPE;
-	} else {
+	} else
 #endif
-	    if (!(mdata->stream.file = fopen(filename, "w")))
-		return (XpmOpenFailed);
-
+	{
+	    mdata->stream.file = fdopen(fd, "w");
 	    mdata->type = XPMFILE;
-#ifndef NO_ZPIPE
 	}
-#endif
+	if (!mdata->stream.file)
+	    return (XpmOpenFailed);
     }
     return (XpmSuccess);
 }
@@ -417,15 +406,6 @@
 xpmDataClose(mdata)
     xpmData *mdata;
 {
-    switch (mdata->type) {
-    case XPMFILE:
-	if (mdata->stream.file != (stdout))
-	    fclose(mdata->stream.file);
-	break;
-#ifndef NO_ZPIPE
-    case XPMPIPE:
+    if (mdata->stream.file != (stdout))
 	fclose(mdata->stream.file);
-	break;
-#endif
-    }
 }
fix file paths in manpage
--- lesstif2-0.94.4.orig/doc/lessdox/clients/mwm.1
+++ lesstif2-0.94.4/doc/lessdox/clients/mwm.1
@@ -88,7 +88,7 @@
 
 The resources are documented in the app defaults file for
 .BR mwm ,
-.I usr/X11R6/lib/X11/app-defaults/Mwm .
+.IR /etc/X11/app-defaults/Mwm .
 
 .SH COPYING
 See the file COPYING which accompanies this distribution of mwm.
Description: fix lintian warning manpage-section-mismatch
Forwarded: no
Author: Paul Gevers <paul@climbing.nl>
Index: lesstif2-0.95.2/doc/lessdox/clients/VirtualBindings.5
===================================================================
--- lesstif2-0.95.2.orig/doc/lessdox/clients/VirtualBindings.5	2009-07-19 20:19:04.000000000 +0200
+++ lesstif2-0.95.2/doc/lessdox/clients/VirtualBindings.5	2009-07-19 20:19:20.000000000 +0200
@@ -18,7 +18,7 @@
 .\" dpkg source package as the file COPYING.  If not, write to the Free
 .\" Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 .\"
-.TH VirtualBindings 1x "January 2001" "LessTif Project" "LessTif Manuals"
+.TH VirtualBindings 5x "January 2001" "LessTif Project" "LessTif Manuals"
 .SH NAME
 VirtualBindings \- Lesstif virtual-bindings facility
 .SH SYNOPSIS
Fri Nov  7 22:50:31 GMT 2008  Steve Cotton <steve@s.cotton.clara.co.uk>
  * Get architecture specific #defs from X11's Xtos.h
diff -rN -u old-lesstif2-0.95.0-1/include/Motif-2.1/XmI/XpmI.h new-lesstif2-0.95.0-1/include/Motif-2.1/XmI/XpmI.h
--- old-lesstif2-0.95.0-1/include/Motif-2.1/XmI/XpmI.h	2008-11-07 23:05:59.000000000 +0000
+++ new-lesstif2-0.95.0-1/include/Motif-2.1/XmI/XpmI.h	2008-11-07 23:05:59.000000000 +0000
@@ -76,12 +76,8 @@
 
 #include <string.h>
 
-/* the following is defined in X11R6 but not in previous versions */
-#ifdef __alpha
-#ifndef LONG64
-#define LONG64
-#endif
-#endif
+/* architecture-specific defines, such as LONG64 on arches with 64-bit longs */
+#include <X11/Xtos.h>
 
 #ifdef VMS
 #include <unixio.h>

Description: fix PutPixel32 crashing on 64 bit.
Forwarded: yes
Bug: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=409093
Bug-fedora: https://bugzilla.redhat.com/show_bug.cgi?id=437133
Origin: other http://kojipkgs.fedoraproject.org/packages/lesstif/0.95.0/28.fc11/src/lesstif-0.95.0-28.fc11.src.rpm
Author: Hans de Goede <j.w.r.degoede@hhs.nl>
diff -up lesstif-0.95.2/lib/Xm-2.1/Xpmcreate.c.cutpaste64 lesstif-0.95.2/lib/Xm-2.1/Xpmcreate.c
--- lesstif-0.95.2/lib/Xm-2.1/Xpmcreate.c.cutpaste64	2007-09-12 22:27:07.000000000 +0200
+++ lesstif-0.95.2/lib/Xm-2.1/Xpmcreate.c	2009-07-28 11:32:07.000000000 +0200
@@ -179,9 +179,7 @@ LFUNC(PutImagePixels1, void, (XImage *im
 
 LFUNC(PutPixel1, int, (XImage *ximage, int x, int y, unsigned long pixel));
 LFUNC(PutPixel, int, (XImage *ximage, int x, int y, unsigned long pixel));
-#if !defined(WORD64) && !defined(LONG64)
 LFUNC(PutPixel32, int, (XImage *ximage, int x, int y, unsigned long pixel));
-#endif
 LFUNC(PutPixel32MSB, int, (XImage *ximage, int x, int y, unsigned long pixel));
 LFUNC(PutPixel32LSB, int, (XImage *ximage, int x, int y, unsigned long pixel));
 LFUNC(PutPixel16MSB, int, (XImage *ximage, int x, int y, unsigned long pixel));
@@ -1326,7 +1324,6 @@ PutImagePixels(image, width, height, pix
  * write pixels into a 32-bits Z image data structure
  */
 
-#if !defined(WORD64) && !defined(LONG64)
 /* this item is static but deterministic so let it slide; doesn't
  * hurt re-entrancy of this library. Note if it is actually const then would
  * be OK under rules of ANSI-C but probably not C++ which may not
@@ -1334,8 +1331,6 @@ PutImagePixels(image, width, height, pix
  */
 static unsigned long byteorderpixel = MSBFirst << 24;
 
-#endif
-
 /*
    WITHOUT_SPEEDUPS is a flag to be turned on if you wish to use the original
    3.2e code - by default you get the speeded-up version.
@@ -1361,16 +1356,13 @@ PutImagePixels32(image, width, height, p
 
     data = (unsigned char *) image->data;
     iptr = pixelindex;
-#if !defined(WORD64) && !defined(LONG64)
     if (*((char *) &byteorderpixel) == image->byte_order) {
 	for (y = 0; y < height; y++)
 	    for (x = 0; x < width; x++, iptr++) {
 		addr = &data[ZINDEX32(x, y, image)];
-		*((unsigned long *) addr) = pixels[*iptr];
+		*((unsigned int *) addr) = pixels[*iptr];
 	    }
-    } else
-#endif
-    if (image->byte_order == MSBFirst)
+    } else if (image->byte_order == MSBFirst)
 	for (y = 0; y < height; y++)
 	    for (x = 0; x < width; x++, iptr++) {
 		addr = &data[ZINDEX32(x, y, image)];
@@ -1398,21 +1390,18 @@ PutImagePixels32(image, width, height, p
 
     data = (unsigned char *) image->data;
     iptr = pixelindex;
-#if !defined(WORD64) && !defined(LONG64)
     if (*((char *) &byteorderpixel) == image->byte_order) {
 	for (y = 0; y < height; y++) {
 	    data_ptr = data;
 	    max_data = data_ptr + (width << 2);
 
 	    while (data_ptr < max_data) {
-		*((unsigned long *) data_ptr) = pixels[*(iptr++)];
+		*((unsigned int *) data_ptr) = pixels[*(iptr++)];
 		data_ptr += (1 << 2);
 	    }
 	    data += bpl;
 	}
-    } else
-#endif
-    if (image->byte_order == MSBFirst)
+    } else if (image->byte_order == MSBFirst)
 	for (y = 0; y < height; y++) {
 	    data_ptr = data;
 	    max_data = data_ptr + (width << 2);
@@ -1879,7 +1868,6 @@ PutPixel(ximage, x, y, pixel)
     return 1;
 }
 
-#if !defined(WORD64) && !defined(LONG64)
 static int
 PutPixel32(ximage, x, y, pixel)
     register XImage *ximage;
@@ -1893,10 +1881,9 @@ PutPixel32(ximage, x, y, pixel)
     	return 0;
 
     addr = &((unsigned char *)ximage->data) [ZINDEX32(x, y, ximage)];
-    *((unsigned long *)addr) = pixel;
+    *((unsigned int *)addr) = pixel;
     return 1;
 }
-#endif
 
 static int
 PutPixel32MSB(ximage, x, y, pixel)
@@ -2211,15 +2198,12 @@ xpmParseDataAndCreate(display, data, ima
 	    else
 		ximage->f.put_pixel = PutPixel16LSB;
 	else if (ximage->bits_per_pixel == 32)
-#if !defined(WORD64) && !defined(LONG64)
 	    if (*((char *)&byteorderpixel) == ximage->byte_order)
 		ximage->f.put_pixel = PutPixel32;
+	    else if (ximage->bitmap_bit_order == MSBFirst)
+		ximage->f.put_pixel = PutPixel32MSB;
 	    else
-#endif
-		if (ximage->bitmap_bit_order == MSBFirst)
-		    ximage->f.put_pixel = PutPixel32MSB;
-		else
-		    ximage->f.put_pixel = PutPixel32LSB;
+		ximage->f.put_pixel = PutPixel32LSB;
 	else if ((ximage->bits_per_pixel | ximage->depth) == 1)
 	    ximage->f.put_pixel = PutPixel1;
 	else
diff -up lesstif-0.95.2/lib/Xm-2.1/Xpmscan.c.cutpaste64 lesstif-0.95.2/lib/Xm-2.1/Xpmscan.c
--- lesstif-0.95.2/lib/Xm-2.1/Xpmscan.c.cutpaste64	2007-09-12 22:27:07.000000000 +0200
+++ lesstif-0.95.2/lib/Xm-2.1/Xpmscan.c	2009-07-28 11:32:07.000000000 +0200
@@ -763,9 +763,7 @@ GetImagePixels(image, width, height, pma
  * scan pixels of a 32-bits Z image data structure
  */
 
-#if !defined(WORD64) && !defined(LONG64)
 static unsigned long byteorderpixel = MSBFirst << 24;
-#endif
 
 static int
 GetImagePixels32(image, width, height, pmap)
@@ -786,20 +784,17 @@ GetImagePixels32(image, width, height, p
     iptr = pmap->pixelindex;
     depth = image->depth;
     lbt = low_bits_table[depth];
-#if !defined(WORD64) && !defined(LONG64)
     if (*((char *) &byteorderpixel) == image->byte_order) {
 	for (y = 0; y < height; y++)
 	    for (x = 0; x < width; x++, iptr++) {
 		addr = &data[ZINDEX32(x, y, image)];
-		pixel = *((unsigned long *) addr);
+		pixel = *((unsigned int *) addr);
 		if (depth != 32)
 		    pixel &= lbt;
 		if (storePixel(pixel, pmap, iptr))
 		    return (XpmNoMemory);
 	    }
-    } else
-#endif
-    if (image->byte_order == MSBFirst)
+    } else if (image->byte_order == MSBFirst)
 	for (y = 0; y < height; y++)
 	    for (x = 0; x < width; x++, iptr++) {
 		addr = &data[ZINDEX32(x, y, image)];
Description: Copy/paste segfaults on i386
Forwarded: yes
Author: Hans de Goede <hdegoede@redhat.com>
diff -up lesstif-0.95.2/lib/Xm-2.1/CutPaste.c.long64 lesstif-0.95.2/lib/Xm-2.1/CutPaste.c
--- lesstif-0.95.2/lib/Xm-2.1/CutPaste.c.long64	2007-09-12 22:05:58.000000000 +0200
+++ lesstif-0.95.2/lib/Xm-2.1/CutPaste.c	2009-07-28 11:32:20.000000000 +0200
@@ -1028,9 +1028,11 @@ _XmClipboardReplaceItem(Display *display
 	/* XChangeProperty expects a buffer of longs when receiving 32 bits
 	   data, MEUHH */
 	if (sizeof(long) != 4)
+	{
 	    convert_buf = XtMalloc(len * sizeof(long));
-        for (i = 0; i < len; i++)
-            convert_buf[i] = data[i];
+	    for (i = 0; i < len; i++)
+                convert_buf[i] = data[i];
+	}
 	break;
 
     case 16:
