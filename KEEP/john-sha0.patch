--- JohnTheRipper-1.8.0.6-jumbo-1.org/src/rawSHA0_fmt_plug.c
+++ JohnTheRipper-1.8.0.6-jumbo-1/src/rawSHA0_fmt_plug.c
@@ -116,9 +116,9 @@
 {
 	const int count = *pcount;
 
-	SHA_Init( &ctx );
-	SHA_Update( &ctx, (unsigned char *) saved_key, strlen( saved_key ) );
-	SHA_Final( (unsigned char *) crypt_key, &ctx);
+	SHA1_Init( &ctx );
+	SHA1_Update( &ctx, (unsigned char *) saved_key, strlen( saved_key ) );
+	SHA1_Final( (unsigned char *) crypt_key, &ctx);
 
 	return count;
 }
--- JohnTheRipper-d1daf24a41ec8a0236dc00dfecba7d57fb99a6a9.org/src/hmac_sha_plug.c
+++ JohnTheRipper-d1daf24a41ec8a0236dc00dfecba7d57fb99a6a9/src/hmac_sha_plug.c
@@ -42,7 +42,7 @@
 
 	if (key_len > 64) {
 		uint32_t *p = (uint32_t*)buf;
-		SHA_Init(&ctx);
+		SHA1_Init(&ctx);
 		SHA1_Update(&ctx, key, key_len);
 		SHA1_Final(buf, &ctx);
 		p[0] ^= 0x36363636; p[1] ^= 0x36363636; p[2] ^= 0x36363636; p[3] ^= 0x36363636; p[4] ^= 0x36363636;
@@ -53,14 +53,14 @@
 		for (i = 0; i < HMAC_SHA32_COUNT; ++i)
 			pW[i] ^= HMAC_SHA_IPAD_XOR;
 	}
-	SHA_Init(&ctx);
+	SHA1_Init(&ctx);
 	SHA1_Update(&ctx, buf, 64);
 	if (data_len)
 		SHA1_Update(&ctx, data, data_len);
 	SHA1_Final(local_digest, &ctx);
 	for (i = 0; i < HMAC_SHA32_COUNT; ++i)
 		pW[i] ^= HMAC_SHA_OPAD_XOR;
-	SHA_Init(&ctx);
+	SHA1_Init(&ctx);
 	SHA1_Update(&ctx, buf, 64);
 	SHA1_Update(&ctx, local_digest, 20);
 	if (digest_len >= 20)
